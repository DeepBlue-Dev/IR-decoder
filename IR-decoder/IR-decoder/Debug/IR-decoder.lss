
IR-decoder.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000029a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000246  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000029a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002cc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b0  00000000  00000000  0000030c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000fbe  00000000  00000000  000003bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009d1  00000000  00000000  0000137a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000063a  00000000  00000000  00001d4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000178  00000000  00000000  00002388  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000051b  00000000  00000000  00002500  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006b7  00000000  00000000  00002a1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  000030d2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 17 01 	jmp	0x22e	; 0x22e <__vector_1>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  6c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  70:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  74:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  78:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_clear_bss>:
  88:	21 e0       	ldi	r18, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
  90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
  92:	a0 30       	cpi	r26, 0x00	; 0
  94:	b2 07       	cpc	r27, r18
  96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
  98:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <main>
  9c:	0c 94 21 01 	jmp	0x242	; 0x242 <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
  a4:	88 b1       	in	r24, 0x08	; 8
  a6:	80 64       	ori	r24, 0x40	; 64
  a8:	88 b9       	out	0x08, r24	; 8
  aa:	00 00       	nop
  ac:	88 b1       	in	r24, 0x08	; 8
  ae:	8f 7b       	andi	r24, 0xBF	; 191
  b0:	88 b9       	out	0x08, r24	; 8
  b2:	08 95       	ret

000000b4 <lcd_write>:
  b4:	cf 93       	push	r28
  b6:	df 93       	push	r29
  b8:	d8 2f       	mov	r29, r24
  ba:	66 23       	and	r22, r22
  bc:	21 f0       	breq	.+8      	; 0xc6 <lcd_write+0x12>
  be:	88 b1       	in	r24, 0x08	; 8
  c0:	80 61       	ori	r24, 0x10	; 16
  c2:	88 b9       	out	0x08, r24	; 8
  c4:	03 c0       	rjmp	.+6      	; 0xcc <lcd_write+0x18>
  c6:	88 b1       	in	r24, 0x08	; 8
  c8:	8f 7e       	andi	r24, 0xEF	; 239
  ca:	88 b9       	out	0x08, r24	; 8
  cc:	88 b1       	in	r24, 0x08	; 8
  ce:	8f 7d       	andi	r24, 0xDF	; 223
  d0:	88 b9       	out	0x08, r24	; 8
  d2:	87 b1       	in	r24, 0x07	; 7
  d4:	8f 60       	ori	r24, 0x0F	; 15
  d6:	87 b9       	out	0x07, r24	; 7
  d8:	c8 b1       	in	r28, 0x08	; 8
  da:	c0 7f       	andi	r28, 0xF0	; 240
  dc:	8d 2f       	mov	r24, r29
  de:	82 95       	swap	r24
  e0:	8f 70       	andi	r24, 0x0F	; 15
  e2:	8c 2b       	or	r24, r28
  e4:	88 b9       	out	0x08, r24	; 8
  e6:	0e 94 52 00 	call	0xa4	; 0xa4 <toggle_e>
  ea:	df 70       	andi	r29, 0x0F	; 15
  ec:	dc 2b       	or	r29, r28
  ee:	d8 b9       	out	0x08, r29	; 8
  f0:	0e 94 52 00 	call	0xa4	; 0xa4 <toggle_e>
  f4:	cf 60       	ori	r28, 0x0F	; 15
  f6:	c8 b9       	out	0x08, r28	; 8
  f8:	df 91       	pop	r29
  fa:	cf 91       	pop	r28
  fc:	08 95       	ret

000000fe <lcd_read>:
  fe:	88 23       	and	r24, r24
 100:	21 f0       	breq	.+8      	; 0x10a <lcd_read+0xc>
 102:	88 b1       	in	r24, 0x08	; 8
 104:	80 61       	ori	r24, 0x10	; 16
 106:	88 b9       	out	0x08, r24	; 8
 108:	03 c0       	rjmp	.+6      	; 0x110 <lcd_read+0x12>
 10a:	88 b1       	in	r24, 0x08	; 8
 10c:	8f 7e       	andi	r24, 0xEF	; 239
 10e:	88 b9       	out	0x08, r24	; 8
 110:	88 b1       	in	r24, 0x08	; 8
 112:	80 62       	ori	r24, 0x20	; 32
 114:	88 b9       	out	0x08, r24	; 8
 116:	87 b1       	in	r24, 0x07	; 7
 118:	80 7f       	andi	r24, 0xF0	; 240
 11a:	87 b9       	out	0x07, r24	; 7
 11c:	88 b1       	in	r24, 0x08	; 8
 11e:	80 64       	ori	r24, 0x40	; 64
 120:	88 b9       	out	0x08, r24	; 8
 122:	00 00       	nop
 124:	96 b1       	in	r25, 0x06	; 6
 126:	92 95       	swap	r25
 128:	90 7f       	andi	r25, 0xF0	; 240
 12a:	88 b1       	in	r24, 0x08	; 8
 12c:	8f 7b       	andi	r24, 0xBF	; 191
 12e:	88 b9       	out	0x08, r24	; 8
 130:	00 00       	nop
 132:	88 b1       	in	r24, 0x08	; 8
 134:	80 64       	ori	r24, 0x40	; 64
 136:	88 b9       	out	0x08, r24	; 8
 138:	00 00       	nop
 13a:	86 b1       	in	r24, 0x06	; 6
 13c:	8f 70       	andi	r24, 0x0F	; 15
 13e:	28 b1       	in	r18, 0x08	; 8
 140:	2f 7b       	andi	r18, 0xBF	; 191
 142:	28 b9       	out	0x08, r18	; 8
 144:	89 2b       	or	r24, r25
 146:	08 95       	ret

00000148 <lcd_waitbusy>:
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	0e 94 7f 00 	call	0xfe	; 0xfe <lcd_read>
 14e:	88 23       	and	r24, r24
 150:	dc f3       	brlt	.-10     	; 0x148 <lcd_waitbusy>
 152:	00 c0       	rjmp	.+0      	; 0x154 <lcd_waitbusy+0xc>
 154:	00 c0       	rjmp	.+0      	; 0x156 <lcd_waitbusy+0xe>
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	0e 94 7f 00 	call	0xfe	; 0xfe <lcd_read>
 15c:	08 95       	ret

0000015e <lcd_command>:
 15e:	cf 93       	push	r28
 160:	c8 2f       	mov	r28, r24
 162:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_waitbusy>
 166:	60 e0       	ldi	r22, 0x00	; 0
 168:	8c 2f       	mov	r24, r28
 16a:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcd_write>
 16e:	cf 91       	pop	r28
 170:	08 95       	ret

00000172 <lcd_clrscr>:
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_command>
 178:	08 95       	ret

0000017a <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 17a:	cf 93       	push	r28
 17c:	c8 2f       	mov	r28, r24
      && ( &LCD_RS_PORT == &LCD_DATA0_PORT) && ( &LCD_RW_PORT == &LCD_DATA0_PORT) && (&LCD_E_PORT == &LCD_DATA0_PORT)
      && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) 
      && (LCD_RS_PIN == 4 ) && (LCD_RW_PIN == 5) && (LCD_E_PIN == 6 ) )
    {
        /* configure all port bits as output (all LCD lines on same port) */
        DDR(LCD_DATA0_PORT) |= 0x7F;
 17e:	87 b1       	in	r24, 0x07	; 7
 180:	8f 67       	ori	r24, 0x7F	; 127
 182:	87 b9       	out	0x07, r24	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 184:	8f e9       	ldi	r24, 0x9F	; 159
 186:	9f e0       	ldi	r25, 0x0F	; 15
 188:	01 97       	sbiw	r24, 0x01	; 1
 18a:	f1 f7       	brne	.-4      	; 0x188 <lcd_init+0xe>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <lcd_init+0x14>
 18e:	00 00       	nop
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(LCD_DELAY_BOOTUP);             /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);    // LCD_FUNCTION>>4;
 190:	88 b1       	in	r24, 0x08	; 8
 192:	82 60       	ori	r24, 0x02	; 2
 194:	88 b9       	out	0x08, r24	; 8
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);    // LCD_FUNCTION_8BIT>>4;
 196:	88 b1       	in	r24, 0x08	; 8
 198:	81 60       	ori	r24, 0x01	; 1
 19a:	88 b9       	out	0x08, r24	; 8
    lcd_e_toggle();
 19c:	0e 94 52 00 	call	0xa4	; 0xa4 <toggle_e>
 1a0:	81 ee       	ldi	r24, 0xE1	; 225
 1a2:	94 e0       	ldi	r25, 0x04	; 4
 1a4:	01 97       	sbiw	r24, 0x01	; 1
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <lcd_init+0x2a>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <lcd_init+0x30>
 1aa:	00 00       	nop
    delay(LCD_DELAY_INIT);               /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 1ac:	0e 94 52 00 	call	0xa4	; 0xa4 <toggle_e>
 1b0:	95 e1       	ldi	r25, 0x15	; 21
 1b2:	9a 95       	dec	r25
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <lcd_init+0x38>
 1b6:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 1b8:	0e 94 52 00 	call	0xa4	; 0xa4 <toggle_e>
 1bc:	85 e1       	ldi	r24, 0x15	; 21
 1be:	8a 95       	dec	r24
 1c0:	f1 f7       	brne	.-4      	; 0x1be <lcd_init+0x44>
 1c2:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 1c4:	88 b1       	in	r24, 0x08	; 8
 1c6:	8e 7f       	andi	r24, 0xFE	; 254
 1c8:	88 b9       	out	0x08, r24	; 8
    lcd_e_toggle();
 1ca:	0e 94 52 00 	call	0xa4	; 0xa4 <toggle_e>
 1ce:	95 e1       	ldi	r25, 0x15	; 21
 1d0:	9a 95       	dec	r25
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <lcd_init+0x56>
 1d4:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 1d6:	88 e2       	ldi	r24, 0x28	; 40
 1d8:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 1dc:	88 e0       	ldi	r24, 0x08	; 8
 1de:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 1e2:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 1e6:	86 e0       	ldi	r24, 0x06	; 6
 1e8:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 1ec:	8c 2f       	mov	r24, r28
 1ee:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_command>

}/* lcd_init */
 1f2:	cf 91       	pop	r28
 1f4:	08 95       	ret

000001f6 <main>:
	0,
	0,
	};
	
    // lcd setup
	lcd_init(LCD_DISP_ON);
 1f6:	8c e0       	ldi	r24, 0x0C	; 12
 1f8:	0e 94 bd 00 	call	0x17a	; 0x17a <lcd_init>

	//	timer1 mode 0, no prescaler, no interrupts
	TCCR1B &= ~((1 <<WGM13) | (1 << WGM12) | (1 << CS11) | (1 << CS12));
 1fc:	e1 e8       	ldi	r30, 0x81	; 129
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	80 81       	ld	r24, Z
 202:	81 7e       	andi	r24, 0xE1	; 225
 204:	80 83       	st	Z, r24
	TCCR1A &= ~((1 << WGM11) | (1 << WGM10));
 206:	a0 e8       	ldi	r26, 0x80	; 128
 208:	b0 e0       	ldi	r27, 0x00	; 0
 20a:	8c 91       	ld	r24, X
 20c:	8c 7f       	andi	r24, 0xFC	; 252
 20e:	8c 93       	st	X, r24
	TCCR1B |= (1 << CS10);
 210:	80 81       	ld	r24, Z
 212:	81 60       	ori	r24, 0x01	; 1
 214:	80 83       	st	Z, r24

	//	INT0, trigger on rising and falling flank, interrupt enabled
	EICRA |= (1 << ISC00);
 216:	e9 e6       	ldi	r30, 0x69	; 105
 218:	f0 e0       	ldi	r31, 0x00	; 0
 21a:	80 81       	ld	r24, Z
 21c:	81 60       	ori	r24, 0x01	; 1
 21e:	80 83       	st	Z, r24
	EICRA &= ~(1 << ISC01);
 220:	80 81       	ld	r24, Z
 222:	8d 7f       	andi	r24, 0xFD	; 253
 224:	80 83       	st	Z, r24
	EIMSK |= (1 << INT0);
 226:	8d b3       	in	r24, 0x1d	; 29
 228:	81 60       	ori	r24, 0x01	; 1
 22a:	8d bb       	out	0x1d, r24	; 29
 22c:	ff cf       	rjmp	.-2      	; 0x22c <main+0x36>

0000022e <__vector_1>:
    {

    }
}

ISR(INT0_vect){
 22e:	1f 92       	push	r1
 230:	0f 92       	push	r0
 232:	0f b6       	in	r0, 0x3f	; 63
 234:	0f 92       	push	r0
 236:	11 24       	eor	r1, r1
	
}
 238:	0f 90       	pop	r0
 23a:	0f be       	out	0x3f, r0	; 63
 23c:	0f 90       	pop	r0
 23e:	1f 90       	pop	r1
 240:	18 95       	reti

00000242 <_exit>:
 242:	f8 94       	cli

00000244 <__stop_program>:
 244:	ff cf       	rjmp	.-2      	; 0x244 <__stop_program>
